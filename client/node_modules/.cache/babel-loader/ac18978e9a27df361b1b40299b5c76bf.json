{"ast":null,"code":"import isFinite from '../polyfills/isFinite';\nimport isInteger from '../polyfills/isInteger';\nimport inspect from '../jsutils/inspect';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport { Kind } from '../language/kinds';\nimport { GraphQLScalarType, isScalarType } from './definition'; // As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\n\nfunction serializeInt(value) {\n  if (typeof value === 'boolean') {\n    return value ? 1 : 0;\n  }\n\n  var num = value;\n\n  if (typeof value === 'string' && value !== '') {\n    num = Number(value);\n  }\n\n  if (!isInteger(num)) {\n    throw new TypeError(\"Int cannot represent non-integer value: \".concat(inspect(value)));\n  }\n\n  if (num > MAX_INT || num < MIN_INT) {\n    throw new TypeError(\"Int cannot represent non 32-bit signed integer value: \".concat(inspect(value)));\n  }\n\n  return num;\n}\n\nfunction coerceInt(value) {\n  if (!isInteger(value)) {\n    throw new TypeError(\"Int cannot represent non-integer value: \".concat(inspect(value)));\n  }\n\n  if (value > MAX_INT || value < MIN_INT) {\n    throw new TypeError(\"Int cannot represent non 32-bit signed integer value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n  serialize: serializeInt,\n  parseValue: coerceInt,\n  parseLiteral: function parseLiteral(ast) {\n    if (ast.kind === Kind.INT) {\n      var num = parseInt(ast.value, 10);\n\n      if (num <= MAX_INT && num >= MIN_INT) {\n        return num;\n      }\n    }\n\n    return undefined;\n  }\n});\n\nfunction serializeFloat(value) {\n  if (typeof value === 'boolean') {\n    return value ? 1 : 0;\n  }\n\n  var num = value;\n\n  if (typeof value === 'string' && value !== '') {\n    num = Number(value);\n  }\n\n  if (!isFinite(num)) {\n    throw new TypeError(\"Float cannot represent non numeric value: \".concat(inspect(value)));\n  }\n\n  return num;\n}\n\nfunction coerceFloat(value) {\n  if (!isFinite(value)) {\n    throw new TypeError(\"Float cannot represent non numeric value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n  serialize: serializeFloat,\n  parseValue: coerceFloat,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.FLOAT || ast.kind === Kind.INT ? parseFloat(ast.value) : undefined;\n  }\n}); // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(value) {\n  if (isObjectLike(value)) {\n    if (typeof value.valueOf === 'function') {\n      var valueOfResult = value.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof value.toJSON === 'function') {\n      // $FlowFixMe(>=0.90.0)\n      return value.toJSON();\n    }\n  }\n\n  return value;\n}\n\nfunction serializeString(rawValue) {\n  var value = serializeObject(rawValue); // Serialize string, boolean and number values to a string, but do not\n  // attempt to coerce object, function, symbol, or other types as strings.\n\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (typeof value === 'boolean') {\n    return value ? 'true' : 'false';\n  }\n\n  if (isFinite(value)) {\n    return value.toString();\n  }\n\n  throw new TypeError(\"String cannot represent value: \".concat(inspect(rawValue)));\n}\n\nfunction coerceString(value) {\n  if (typeof value !== 'string') {\n    throw new TypeError(\"String cannot represent a non string value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n  serialize: serializeString,\n  parseValue: coerceString,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING ? ast.value : undefined;\n  }\n});\n\nfunction serializeBoolean(value) {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n\n  if (isFinite(value)) {\n    return value !== 0;\n  }\n\n  throw new TypeError(\"Boolean cannot represent a non boolean value: \".concat(inspect(value)));\n}\n\nfunction coerceBoolean(value) {\n  if (typeof value !== 'boolean') {\n    throw new TypeError(\"Boolean cannot represent a non boolean value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: serializeBoolean,\n  parseValue: coerceBoolean,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.BOOLEAN ? ast.value : undefined;\n  }\n});\n\nfunction serializeID(rawValue) {\n  var value = serializeObject(rawValue);\n\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (isInteger(value)) {\n    return String(value);\n  }\n\n  throw new TypeError(\"ID cannot represent value: \".concat(inspect(rawValue)));\n}\n\nfunction coerceID(value) {\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (isInteger(value)) {\n    return value.toString();\n  }\n\n  throw new TypeError(\"ID cannot represent value: \".concat(inspect(value)));\n}\n\nexport var GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n  serialize: serializeID,\n  parseValue: coerceID,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING || ast.kind === Kind.INT ? ast.value : undefined;\n  }\n});\nexport var specifiedScalarTypes = Object.freeze([GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID]);\nexport function isSpecifiedScalarType(type) {\n  return isScalarType(type) && specifiedScalarTypes.some(function (_ref) {\n    var name = _ref.name;\n    return type.name === name;\n  });\n}","map":{"version":3,"sources":["/Users/austinhague/Full_Stack_UofR/Projects/House-show/client/node_modules/graphql/type/scalars.mjs"],"names":["isFinite","isInteger","inspect","isObjectLike","Kind","GraphQLScalarType","isScalarType","MAX_INT","MIN_INT","serializeInt","value","num","Number","TypeError","concat","coerceInt","GraphQLInt","name","description","serialize","parseValue","parseLiteral","ast","kind","INT","parseInt","undefined","serializeFloat","coerceFloat","GraphQLFloat","FLOAT","parseFloat","serializeObject","valueOf","valueOfResult","toJSON","serializeString","rawValue","toString","coerceString","GraphQLString","STRING","serializeBoolean","coerceBoolean","GraphQLBoolean","BOOLEAN","serializeID","String","coerceID","GraphQLID","specifiedScalarTypes","Object","freeze","isSpecifiedScalarType","type","some","_ref"],"mappings":"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","sourcesContent":["import isFinite from '../polyfills/isFinite';\nimport isInteger from '../polyfills/isInteger';\nimport inspect from '../jsutils/inspect';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport { Kind } from '../language/kinds';\nimport { GraphQLScalarType, isScalarType } from './definition'; // As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\n\nfunction serializeInt(value) {\n  if (typeof value === 'boolean') {\n    return value ? 1 : 0;\n  }\n\n  var num = value;\n\n  if (typeof value === 'string' && value !== '') {\n    num = Number(value);\n  }\n\n  if (!isInteger(num)) {\n    throw new TypeError(\"Int cannot represent non-integer value: \".concat(inspect(value)));\n  }\n\n  if (num > MAX_INT || num < MIN_INT) {\n    throw new TypeError(\"Int cannot represent non 32-bit signed integer value: \".concat(inspect(value)));\n  }\n\n  return num;\n}\n\nfunction coerceInt(value) {\n  if (!isInteger(value)) {\n    throw new TypeError(\"Int cannot represent non-integer value: \".concat(inspect(value)));\n  }\n\n  if (value > MAX_INT || value < MIN_INT) {\n    throw new TypeError(\"Int cannot represent non 32-bit signed integer value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n  serialize: serializeInt,\n  parseValue: coerceInt,\n  parseLiteral: function parseLiteral(ast) {\n    if (ast.kind === Kind.INT) {\n      var num = parseInt(ast.value, 10);\n\n      if (num <= MAX_INT && num >= MIN_INT) {\n        return num;\n      }\n    }\n\n    return undefined;\n  }\n});\n\nfunction serializeFloat(value) {\n  if (typeof value === 'boolean') {\n    return value ? 1 : 0;\n  }\n\n  var num = value;\n\n  if (typeof value === 'string' && value !== '') {\n    num = Number(value);\n  }\n\n  if (!isFinite(num)) {\n    throw new TypeError(\"Float cannot represent non numeric value: \".concat(inspect(value)));\n  }\n\n  return num;\n}\n\nfunction coerceFloat(value) {\n  if (!isFinite(value)) {\n    throw new TypeError(\"Float cannot represent non numeric value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n  serialize: serializeFloat,\n  parseValue: coerceFloat,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.FLOAT || ast.kind === Kind.INT ? parseFloat(ast.value) : undefined;\n  }\n}); // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(value) {\n  if (isObjectLike(value)) {\n    if (typeof value.valueOf === 'function') {\n      var valueOfResult = value.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof value.toJSON === 'function') {\n      // $FlowFixMe(>=0.90.0)\n      return value.toJSON();\n    }\n  }\n\n  return value;\n}\n\nfunction serializeString(rawValue) {\n  var value = serializeObject(rawValue); // Serialize string, boolean and number values to a string, but do not\n  // attempt to coerce object, function, symbol, or other types as strings.\n\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (typeof value === 'boolean') {\n    return value ? 'true' : 'false';\n  }\n\n  if (isFinite(value)) {\n    return value.toString();\n  }\n\n  throw new TypeError(\"String cannot represent value: \".concat(inspect(rawValue)));\n}\n\nfunction coerceString(value) {\n  if (typeof value !== 'string') {\n    throw new TypeError(\"String cannot represent a non string value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n  serialize: serializeString,\n  parseValue: coerceString,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING ? ast.value : undefined;\n  }\n});\n\nfunction serializeBoolean(value) {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n\n  if (isFinite(value)) {\n    return value !== 0;\n  }\n\n  throw new TypeError(\"Boolean cannot represent a non boolean value: \".concat(inspect(value)));\n}\n\nfunction coerceBoolean(value) {\n  if (typeof value !== 'boolean') {\n    throw new TypeError(\"Boolean cannot represent a non boolean value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: serializeBoolean,\n  parseValue: coerceBoolean,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.BOOLEAN ? ast.value : undefined;\n  }\n});\n\nfunction serializeID(rawValue) {\n  var value = serializeObject(rawValue);\n\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (isInteger(value)) {\n    return String(value);\n  }\n\n  throw new TypeError(\"ID cannot represent value: \".concat(inspect(rawValue)));\n}\n\nfunction coerceID(value) {\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (isInteger(value)) {\n    return value.toString();\n  }\n\n  throw new TypeError(\"ID cannot represent value: \".concat(inspect(value)));\n}\n\nexport var GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n  serialize: serializeID,\n  parseValue: coerceID,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING || ast.kind === Kind.INT ? ast.value : undefined;\n  }\n});\nexport var specifiedScalarTypes = Object.freeze([GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID]);\nexport function isSpecifiedScalarType(type) {\n  return isScalarType(type) && specifiedScalarTypes.some(function (_ref) {\n    var name = _ref.name;\n    return type.name === name;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}