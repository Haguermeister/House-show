{"ast":null,"code":"import { forEach, isCollection } from 'iterall';\nimport objectValues from '../polyfills/objectValues';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport didYouMean from '../jsutils/didYouMean';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport suggestionList from '../jsutils/suggestionList';\nimport printPathArray from '../jsutils/printPathArray';\nimport { addPath, pathToArray } from '../jsutils/Path';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\n\nexport function coerceInputValue(inputValue, type) {\n  var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;\n  return coerceInputValueImpl(inputValue, type, onError);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  var errorPrefix = 'Invalid value ' + inspect(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += \" at \\\"value\".concat(printPathArray(path), \"\\\": \");\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(pathToArray(path), inputValue, new GraphQLError(\"Expected non-nullable type \".concat(inspect(type), \" not to be null.\")));\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (isCollection(inputValue)) {\n      var coercedValue = [];\n      forEach(inputValue, function (itemValue, index) {\n        coercedValue.push(coerceInputValueImpl(itemValue, itemType, onError, addPath(path, index)));\n      });\n      return coercedValue;\n    } // Lists accept a non-list value as a list of one.\n\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \".concat(type.name, \" to be an object.\")));\n      return;\n    }\n\n    var _coercedValue = {};\n    var fieldDefs = type.getFields();\n\n    for (var _i2 = 0, _objectValues2 = objectValues(fieldDefs); _i2 < _objectValues2.length; _i2++) {\n      var field = _objectValues2[_i2];\n      var fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          _coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          var typeStr = inspect(field.type);\n          onError(pathToArray(path), inputValue, new GraphQLError(\"Field \".concat(field.name, \" of required type \").concat(typeStr, \" was not provided.\")));\n        }\n\n        continue;\n      }\n\n      _coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, addPath(path, field.name));\n    } // Ensure every provided field is defined.\n\n\n    for (var _i4 = 0, _Object$keys2 = Object.keys(inputValue); _i4 < _Object$keys2.length; _i4++) {\n      var fieldName = _Object$keys2[_i4];\n\n      if (!fieldDefs[fieldName]) {\n        var suggestions = suggestionList(fieldName, Object.keys(type.getFields()));\n        onError(pathToArray(path), inputValue, new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \").concat(type.name, \".\") + didYouMean(suggestions)));\n      }\n    }\n\n    return _coercedValue;\n  }\n\n  if (isScalarType(type)) {\n    var parseResult; // Scalars determine if a input value is valid via parseValue(), which can\n    // throw to indicate failure. If it throws, maintain a reference to\n    // the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \".concat(type.name, \". \") + error.message, undefined, undefined, undefined, undefined, error));\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \".concat(type.name, \".\")));\n    }\n\n    return parseResult;\n  }\n  /* istanbul ignore else */\n\n\n  if (isEnumType(type)) {\n    if (typeof inputValue === 'string') {\n      var enumValue = type.getValue(inputValue);\n\n      if (enumValue) {\n        return enumValue.value;\n      }\n    }\n\n    var _suggestions = suggestionList(String(inputValue), type.getValues().map(function (enumValue) {\n      return enumValue.name;\n    }));\n\n    onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \".concat(type.name, \".\") + didYouMean(_suggestions)));\n    return;\n  } // Not reachable. All possible input types have been considered.\n\n  /* istanbul ignore next */\n\n\n  invariant(false, 'Unexpected input type: ' + inspect(type));\n}","map":{"version":3,"sources":["/Users/austinhague/Full_Stack_UofR/Projects/shop-shop-till-you-drop/client/node_modules/graphql/utilities/coerceInputValue.mjs"],"names":["forEach","isCollection","objectValues","inspect","invariant","didYouMean","isObjectLike","suggestionList","printPathArray","addPath","pathToArray","GraphQLError","isScalarType","isEnumType","isInputObjectType","isListType","isNonNullType","coerceInputValue","inputValue","type","onError","arguments","length","undefined","defaultOnError","coerceInputValueImpl","path","invalidValue","error","errorPrefix","concat","message","ofType","itemType","coercedValue","itemValue","index","push","name","_coercedValue","fieldDefs","getFields","_i2","_objectValues2","field","fieldValue","defaultValue","typeStr","_i4","_Object$keys2","Object","keys","fieldName","suggestions","parseResult","parseValue","enumValue","getValue","value","_suggestions","String","getValues","map"],"mappings":"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","sourcesContent":["import { forEach, isCollection } from 'iterall';\nimport objectValues from '../polyfills/objectValues';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport didYouMean from '../jsutils/didYouMean';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport suggestionList from '../jsutils/suggestionList';\nimport printPathArray from '../jsutils/printPathArray';\nimport { addPath, pathToArray } from '../jsutils/Path';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(inputValue, type) {\n  var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;\n  return coerceInputValueImpl(inputValue, type, onError);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  var errorPrefix = 'Invalid value ' + inspect(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += \" at \\\"value\".concat(printPathArray(path), \"\\\": \");\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(pathToArray(path), inputValue, new GraphQLError(\"Expected non-nullable type \".concat(inspect(type), \" not to be null.\")));\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (isCollection(inputValue)) {\n      var coercedValue = [];\n      forEach(inputValue, function (itemValue, index) {\n        coercedValue.push(coerceInputValueImpl(itemValue, itemType, onError, addPath(path, index)));\n      });\n      return coercedValue;\n    } // Lists accept a non-list value as a list of one.\n\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \".concat(type.name, \" to be an object.\")));\n      return;\n    }\n\n    var _coercedValue = {};\n    var fieldDefs = type.getFields();\n\n    for (var _i2 = 0, _objectValues2 = objectValues(fieldDefs); _i2 < _objectValues2.length; _i2++) {\n      var field = _objectValues2[_i2];\n      var fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          _coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          var typeStr = inspect(field.type);\n          onError(pathToArray(path), inputValue, new GraphQLError(\"Field \".concat(field.name, \" of required type \").concat(typeStr, \" was not provided.\")));\n        }\n\n        continue;\n      }\n\n      _coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, addPath(path, field.name));\n    } // Ensure every provided field is defined.\n\n\n    for (var _i4 = 0, _Object$keys2 = Object.keys(inputValue); _i4 < _Object$keys2.length; _i4++) {\n      var fieldName = _Object$keys2[_i4];\n\n      if (!fieldDefs[fieldName]) {\n        var suggestions = suggestionList(fieldName, Object.keys(type.getFields()));\n        onError(pathToArray(path), inputValue, new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \").concat(type.name, \".\") + didYouMean(suggestions)));\n      }\n    }\n\n    return _coercedValue;\n  }\n\n  if (isScalarType(type)) {\n    var parseResult; // Scalars determine if a input value is valid via parseValue(), which can\n    // throw to indicate failure. If it throws, maintain a reference to\n    // the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \".concat(type.name, \". \") + error.message, undefined, undefined, undefined, undefined, error));\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \".concat(type.name, \".\")));\n    }\n\n    return parseResult;\n  }\n\n  /* istanbul ignore else */\n  if (isEnumType(type)) {\n    if (typeof inputValue === 'string') {\n      var enumValue = type.getValue(inputValue);\n\n      if (enumValue) {\n        return enumValue.value;\n      }\n    }\n\n    var _suggestions = suggestionList(String(inputValue), type.getValues().map(function (enumValue) {\n      return enumValue.name;\n    }));\n\n    onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \".concat(type.name, \".\") + didYouMean(_suggestions)));\n    return;\n  } // Not reachable. All possible input types have been considered.\n\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n"]},"metadata":{},"sourceType":"module"}