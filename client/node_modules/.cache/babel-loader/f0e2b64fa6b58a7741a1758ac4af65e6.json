{"ast":null,"code":"import objectValues from '../../polyfills/objectValues';\nimport keyMap from '../../jsutils/keyMap';\nimport inspect from '../../jsutils/inspect';\nimport isInvalid from '../../jsutils/isInvalid';\nimport didYouMean from '../../jsutils/didYouMean';\nimport suggestionList from '../../jsutils/suggestionList';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType, isRequiredInputField, getNullableType, getNamedType } from '../../type/definition';\nexport function badValueMessage(typeName, valueName, message) {\n  return \"Expected type \".concat(typeName, \", found \").concat(valueName) + (message ? \"; \".concat(message) : '.');\n}\nexport function badEnumValueMessage(typeName, valueName, suggestedValues) {\n  return \"Expected type \".concat(typeName, \", found \").concat(valueName, \".\") + didYouMean('the enum value', suggestedValues);\n}\nexport function requiredFieldMessage(typeName, fieldName, fieldTypeName) {\n  return \"Field \".concat(typeName, \".\").concat(fieldName, \" of required type \").concat(fieldTypeName, \" was not provided.\");\n}\nexport function unknownFieldMessage(typeName, fieldName, suggestedFields) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \").concat(typeName, \".\") + didYouMean(suggestedFields);\n}\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\n\nexport function ValuesOfCorrectType(context) {\n  return {\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(badValueMessage(inspect(type), print(node)), node));\n      }\n    },\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n\n      for (var _i2 = 0, _objectValues2 = objectValues(type.getFields()); _i2 < _objectValues2.length; _i2++) {\n        var fieldDef = _objectValues2[_i2];\n        var fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          var typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(requiredFieldMessage(type.name, fieldDef.name, typeStr), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        context.reportError(new GraphQLError(unknownFieldMessage(parentType.name, node.name.value, suggestions), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isEnumType(type)) {\n        isValidScalar(context, node);\n      } else if (!type.getValue(node.value)) {\n        context.reportError(new GraphQLError(badEnumValueMessage(type.name, print(node), enumTypeSuggestion(type, node)), node));\n      }\n    },\n    IntValue: function IntValue(node) {\n      return isValidScalar(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidScalar(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidScalar(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidScalar(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidScalar(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  var type = getNamedType(locationType);\n\n  if (!isScalarType(type)) {\n    var message = isEnumType(type) ? badEnumValueMessage(inspect(locationType), print(node), enumTypeSuggestion(type, node)) : badValueMessage(inspect(locationType), print(node));\n    context.reportError(new GraphQLError(message, node));\n    return;\n  } // Scalars determine if a literal value is valid via parseLiteral() which\n  // may throw or return an invalid value to indicate failure.\n\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (isInvalid(parseResult)) {\n      context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node)), node));\n    }\n  } catch (error) {\n    // Ensure a reference to the original error is maintained.\n    context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node), error.message), node, undefined, undefined, undefined, error));\n  }\n}\n\nfunction enumTypeSuggestion(type, node) {\n  var allNames = type.getValues().map(function (value) {\n    return value.name;\n  });\n  return suggestionList(print(node), allNames);\n}","map":{"version":3,"sources":["/Users/austinhague/Full_Stack_UofR/Projects/shop-shop-till-you-drop/client/node_modules/graphql/validation/rules/ValuesOfCorrectType.mjs"],"names":["objectValues","keyMap","inspect","isInvalid","didYouMean","suggestionList","GraphQLError","print","isScalarType","isEnumType","isInputObjectType","isListType","isNonNullType","isRequiredInputField","getNullableType","getNamedType","badValueMessage","typeName","valueName","message","concat","badEnumValueMessage","suggestedValues","requiredFieldMessage","fieldName","fieldTypeName","unknownFieldMessage","suggestedFields","ValuesOfCorrectType","context","NullValue","node","type","getInputType","reportError","ListValue","getParentInputType","isValidScalar","ObjectValue","fieldNodeMap","fields","field","name","value","_i2","_objectValues2","getFields","length","fieldDef","fieldNode","typeStr","ObjectField","parentType","fieldType","suggestions","Object","keys","EnumValue","getValue","enumTypeSuggestion","IntValue","FloatValue","StringValue","BooleanValue","locationType","parseResult","parseLiteral","undefined","error","allNames","getValues","map"],"mappings":"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","sourcesContent":["import objectValues from '../../polyfills/objectValues';\nimport keyMap from '../../jsutils/keyMap';\nimport inspect from '../../jsutils/inspect';\nimport isInvalid from '../../jsutils/isInvalid';\nimport didYouMean from '../../jsutils/didYouMean';\nimport suggestionList from '../../jsutils/suggestionList';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType, isRequiredInputField, getNullableType, getNamedType } from '../../type/definition';\nexport function badValueMessage(typeName, valueName, message) {\n  return \"Expected type \".concat(typeName, \", found \").concat(valueName) + (message ? \"; \".concat(message) : '.');\n}\nexport function badEnumValueMessage(typeName, valueName, suggestedValues) {\n  return \"Expected type \".concat(typeName, \", found \").concat(valueName, \".\") + didYouMean('the enum value', suggestedValues);\n}\nexport function requiredFieldMessage(typeName, fieldName, fieldTypeName) {\n  return \"Field \".concat(typeName, \".\").concat(fieldName, \" of required type \").concat(fieldTypeName, \" was not provided.\");\n}\nexport function unknownFieldMessage(typeName, fieldName, suggestedFields) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \").concat(typeName, \".\") + didYouMean(suggestedFields);\n}\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\n\nexport function ValuesOfCorrectType(context) {\n  return {\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(badValueMessage(inspect(type), print(node)), node));\n      }\n    },\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n\n      for (var _i2 = 0, _objectValues2 = objectValues(type.getFields()); _i2 < _objectValues2.length; _i2++) {\n        var fieldDef = _objectValues2[_i2];\n        var fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          var typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(requiredFieldMessage(type.name, fieldDef.name, typeStr), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        context.reportError(new GraphQLError(unknownFieldMessage(parentType.name, node.name.value, suggestions), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isEnumType(type)) {\n        isValidScalar(context, node);\n      } else if (!type.getValue(node.value)) {\n        context.reportError(new GraphQLError(badEnumValueMessage(type.name, print(node), enumTypeSuggestion(type, node)), node));\n      }\n    },\n    IntValue: function IntValue(node) {\n      return isValidScalar(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidScalar(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidScalar(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidScalar(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidScalar(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  var type = getNamedType(locationType);\n\n  if (!isScalarType(type)) {\n    var message = isEnumType(type) ? badEnumValueMessage(inspect(locationType), print(node), enumTypeSuggestion(type, node)) : badValueMessage(inspect(locationType), print(node));\n    context.reportError(new GraphQLError(message, node));\n    return;\n  } // Scalars determine if a literal value is valid via parseLiteral() which\n  // may throw or return an invalid value to indicate failure.\n\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (isInvalid(parseResult)) {\n      context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node)), node));\n    }\n  } catch (error) {\n    // Ensure a reference to the original error is maintained.\n    context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node), error.message), node, undefined, undefined, undefined, error));\n  }\n}\n\nfunction enumTypeSuggestion(type, node) {\n  var allNames = type.getValues().map(function (value) {\n    return value.name;\n  });\n  return suggestionList(print(node), allNames);\n}\n"]},"metadata":{},"sourceType":"module"}