{"ast":null,"code":"import { visit } from '../language/visitor';\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\n\nexport function separateOperations(documentAST) {\n  var operations = [];\n  var fragments = Object.create(null);\n  var positions = new Map();\n  var depGraph = Object.create(null);\n  var fromName;\n  var idx = 0; // Populate metadata and build a dependency graph.\n\n  visit(documentAST, {\n    OperationDefinition: function OperationDefinition(node) {\n      fromName = opName(node);\n      operations.push(node);\n      positions.set(node, idx++);\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fromName = node.name.value;\n      fragments[fromName] = node;\n      positions.set(node, idx++);\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var toName = node.name.value;\n      (depGraph[fromName] || (depGraph[fromName] = Object.create(null)))[toName] = true;\n    }\n  }); // For each operation, produce a new synthesized AST which includes only what\n  // is necessary for completing that operation.\n\n  var separatedDocumentASTs = Object.create(null);\n\n  for (var _i2 = 0; _i2 < operations.length; _i2++) {\n    var operation = operations[_i2];\n    var operationName = opName(operation);\n    var dependencies = Object.create(null);\n    collectTransitiveDependencies(dependencies, depGraph, operationName); // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n\n    var definitions = [operation];\n\n    for (var _i4 = 0, _Object$keys2 = Object.keys(dependencies); _i4 < _Object$keys2.length; _i4++) {\n      var name = _Object$keys2[_i4];\n      definitions.push(fragments[name]);\n    }\n\n    definitions.sort(function (n1, n2) {\n      return (positions.get(n1) || 0) - (positions.get(n2) || 0);\n    });\n    separatedDocumentASTs[operationName] = {\n      kind: 'Document',\n      definitions: definitions\n    };\n  }\n\n  return separatedDocumentASTs;\n} // Provides the empty string for anonymous operations.\n\nfunction opName(operation) {\n  return operation.name ? operation.name.value : '';\n} // From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\n\n\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  var immediateDeps = depGraph[fromName];\n\n  if (immediateDeps) {\n    for (var _i6 = 0, _Object$keys4 = Object.keys(immediateDeps); _i6 < _Object$keys4.length; _i6++) {\n      var toName = _Object$keys4[_i6];\n\n      if (!collected[toName]) {\n        collected[toName] = true;\n        collectTransitiveDependencies(collected, depGraph, toName);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["/Users/austinhague/Full_Stack_UofR/Projects/House-show/client/node_modules/graphql/utilities/separateOperations.mjs"],"names":["visit","separateOperations","documentAST","operations","fragments","Object","create","positions","Map","depGraph","fromName","idx","OperationDefinition","node","opName","push","set","FragmentDefinition","name","value","FragmentSpread","toName","separatedDocumentASTs","_i2","length","operation","operationName","dependencies","collectTransitiveDependencies","definitions","_i4","_Object$keys2","keys","sort","n1","n2","get","kind","collected","immediateDeps","_i6","_Object$keys4"],"mappings":"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","sourcesContent":["import { visit } from '../language/visitor';\n\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\nexport function separateOperations(documentAST) {\n  var operations = [];\n  var fragments = Object.create(null);\n  var positions = new Map();\n  var depGraph = Object.create(null);\n  var fromName;\n  var idx = 0; // Populate metadata and build a dependency graph.\n\n  visit(documentAST, {\n    OperationDefinition: function OperationDefinition(node) {\n      fromName = opName(node);\n      operations.push(node);\n      positions.set(node, idx++);\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fromName = node.name.value;\n      fragments[fromName] = node;\n      positions.set(node, idx++);\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var toName = node.name.value;\n      (depGraph[fromName] || (depGraph[fromName] = Object.create(null)))[toName] = true;\n    }\n  }); // For each operation, produce a new synthesized AST which includes only what\n  // is necessary for completing that operation.\n\n  var separatedDocumentASTs = Object.create(null);\n\n  for (var _i2 = 0; _i2 < operations.length; _i2++) {\n    var operation = operations[_i2];\n    var operationName = opName(operation);\n    var dependencies = Object.create(null);\n    collectTransitiveDependencies(dependencies, depGraph, operationName); // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n\n    var definitions = [operation];\n\n    for (var _i4 = 0, _Object$keys2 = Object.keys(dependencies); _i4 < _Object$keys2.length; _i4++) {\n      var name = _Object$keys2[_i4];\n      definitions.push(fragments[name]);\n    }\n\n    definitions.sort(function (n1, n2) {\n      return (positions.get(n1) || 0) - (positions.get(n2) || 0);\n    });\n    separatedDocumentASTs[operationName] = {\n      kind: 'Document',\n      definitions: definitions\n    };\n  }\n\n  return separatedDocumentASTs;\n}\n\n// Provides the empty string for anonymous operations.\nfunction opName(operation) {\n  return operation.name ? operation.name.value : '';\n} // From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\n\n\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  var immediateDeps = depGraph[fromName];\n\n  if (immediateDeps) {\n    for (var _i6 = 0, _Object$keys4 = Object.keys(immediateDeps); _i6 < _Object$keys4.length; _i6++) {\n      var toName = _Object$keys4[_i6];\n\n      if (!collected[toName]) {\n        collected[toName] = true;\n        collectTransitiveDependencies(collected, depGraph, toName);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}