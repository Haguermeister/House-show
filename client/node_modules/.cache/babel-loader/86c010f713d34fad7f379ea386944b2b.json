{"ast":null,"code":"import inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport { Kind } from '../language/kinds';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition';\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n\n/* eslint-disable no-redeclare */\n\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType;\n\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLList(innerType);\n  }\n\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLNonNull(innerType);\n  }\n  /* istanbul ignore else */\n\n\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  } // Not reachable. All possible type nodes have been considered.\n\n  /* istanbul ignore next */\n\n\n  invariant(false, 'Unexpected type node: ' + inspect(typeNode));\n}","map":{"version":3,"sources":["/Users/austinhague/Full_Stack_UofR/Projects/House-show/client/node_modules/graphql/utilities/typeFromAST.mjs"],"names":["inspect","invariant","Kind","GraphQLList","GraphQLNonNull","typeFromAST","schema","typeNode","innerType","kind","LIST_TYPE","type","NON_NULL_TYPE","NAMED_TYPE","getType","name","value"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,oBAA5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,QAA7B,EAAuC;AAC5C;AACA,MAAIC,SAAJ;;AAEA,MAAID,QAAQ,CAACE,IAAT,KAAkBP,IAAI,CAACQ,SAA3B,EAAsC;AACpCF,IAAAA,SAAS,GAAGH,WAAW,CAACC,MAAD,EAASC,QAAQ,CAACI,IAAlB,CAAvB;AACA,WAAOH,SAAS,IAAIL,WAAW,CAACK,SAAD,CAA/B;AACD;;AAED,MAAID,QAAQ,CAACE,IAAT,KAAkBP,IAAI,CAACU,aAA3B,EAA0C;AACxCJ,IAAAA,SAAS,GAAGH,WAAW,CAACC,MAAD,EAASC,QAAQ,CAACI,IAAlB,CAAvB;AACA,WAAOH,SAAS,IAAIJ,cAAc,CAACI,SAAD,CAAlC;AACD;AAED;;;AACA,MAAID,QAAQ,CAACE,IAAT,KAAkBP,IAAI,CAACW,UAA3B,EAAuC;AACrC,WAAOP,MAAM,CAACQ,OAAP,CAAeP,QAAQ,CAACQ,IAAT,CAAcC,KAA7B,CAAP;AACD,GAjB2C,CAiB1C;;AAGF;;;AACAf,EAAAA,SAAS,CAAC,KAAD,EAAQ,2BAA2BD,OAAO,CAACO,QAAD,CAA1C,CAAT;AACD","sourcesContent":["import inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport { Kind } from '../language/kinds';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition';\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n\n/* eslint-disable no-redeclare */\n\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType;\n\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLList(innerType);\n  }\n\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLNonNull(innerType);\n  }\n\n  /* istanbul ignore else */\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  } // Not reachable. All possible type nodes have been considered.\n\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected type node: ' + inspect(typeNode));\n}\n"]},"metadata":{},"sourceType":"module"}