{"ast":null,"code":"import { forEach, isCollection } from 'iterall';\nimport objectValues from '../polyfills/objectValues';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport isNullish from '../jsutils/isNullish';\nimport isInvalid from '../jsutils/isInvalid';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport { Kind } from '../language/kinds';\nimport { GraphQLID } from '../type/scalars';\nimport { isLeafType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\n/**\n * Produces a GraphQL Value AST given a JavaScript value.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    var astValue = astFromValue(value, type.ofType);\n\n    if (astValue && astValue.kind === Kind.NULL) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL\n    };\n  } // undefined, NaN\n\n\n  if (isInvalid(value)) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (isCollection(value)) {\n      var valuesNodes = [];\n      forEach(value, function (item) {\n        var itemNode = astFromValue(item, itemType);\n\n        if (itemNode) {\n          valuesNodes.push(itemNode);\n        }\n      });\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(value)) {\n      return null;\n    }\n\n    var fieldNodes = [];\n\n    for (var _i2 = 0, _objectValues2 = objectValues(type.getFields()); _i2 < _objectValues2.length; _i2++) {\n      var field = _objectValues2[_i2];\n      var fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name\n          },\n          value: fieldValue\n        });\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes\n    };\n  }\n  /* istanbul ignore else */\n\n\n  if (isLeafType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(value);\n\n    if (isNullish(serialized)) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n\n    if (typeof serialized === 'number') {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? {\n        kind: Kind.INT,\n        value: stringNum\n      } : {\n        kind: Kind.FLOAT,\n        value: stringNum\n      };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized\n        };\n      } // ID types can use Int literals.\n\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized\n      };\n    }\n\n    throw new TypeError(\"Cannot convert value to AST: \".concat(inspect(serialized)));\n  } // Not reachable. All possible input types have been considered.\n\n  /* istanbul ignore next */\n\n\n  invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nvar integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;","map":{"version":3,"sources":["/Users/austinhague/Full_Stack_UofR/Projects/shop-shop-till-you-drop/client/node_modules/graphql/utilities/astFromValue.mjs"],"names":["forEach","isCollection","objectValues","inspect","invariant","isNullish","isInvalid","isObjectLike","Kind","GraphQLID","isLeafType","isEnumType","isInputObjectType","isListType","isNonNullType","astFromValue","value","type","astValue","ofType","kind","NULL","itemType","valuesNodes","item","itemNode","push","LIST","values","fieldNodes","_i2","_objectValues2","getFields","length","field","fieldValue","name","OBJECT_FIELD","NAME","OBJECT","fields","serialized","serialize","BOOLEAN","stringNum","String","integerStringRegExp","test","INT","FLOAT","ENUM","STRING","TypeError","concat"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,YAAlB,QAAsC,SAAtC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,iBAAjC,EAAoDC,UAApD,EAAgEC,aAAhE,QAAqF,oBAArF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,IAA7B,EAAmC;AACxC,MAAIH,aAAa,CAACG,IAAD,CAAjB,EAAyB;AACvB,QAAIC,QAAQ,GAAGH,YAAY,CAACC,KAAD,EAAQC,IAAI,CAACE,MAAb,CAA3B;;AAEA,QAAID,QAAQ,IAAIA,QAAQ,CAACE,IAAT,KAAkBZ,IAAI,CAACa,IAAvC,EAA6C;AAC3C,aAAO,IAAP;AACD;;AAED,WAAOH,QAAP;AACD,GATuC,CAStC;;;AAGF,MAAIF,KAAK,KAAK,IAAd,EAAoB;AAClB,WAAO;AACLI,MAAAA,IAAI,EAAEZ,IAAI,CAACa;AADN,KAAP;AAGD,GAhBuC,CAgBtC;;;AAGF,MAAIf,SAAS,CAACU,KAAD,CAAb,EAAsB;AACpB,WAAO,IAAP;AACD,GArBuC,CAqBtC;AACF;;;AAGA,MAAIH,UAAU,CAACI,IAAD,CAAd,EAAsB;AACpB,QAAIK,QAAQ,GAAGL,IAAI,CAACE,MAApB;;AAEA,QAAIlB,YAAY,CAACe,KAAD,CAAhB,EAAyB;AACvB,UAAIO,WAAW,GAAG,EAAlB;AACAvB,MAAAA,OAAO,CAACgB,KAAD,EAAQ,UAAUQ,IAAV,EAAgB;AAC7B,YAAIC,QAAQ,GAAGV,YAAY,CAACS,IAAD,EAAOF,QAAP,CAA3B;;AAEA,YAAIG,QAAJ,EAAc;AACZF,UAAAA,WAAW,CAACG,IAAZ,CAAiBD,QAAjB;AACD;AACF,OANM,CAAP;AAOA,aAAO;AACLL,QAAAA,IAAI,EAAEZ,IAAI,CAACmB,IADN;AAELC,QAAAA,MAAM,EAAEL;AAFH,OAAP;AAID;;AAED,WAAOR,YAAY,CAACC,KAAD,EAAQM,QAAR,CAAnB;AACD,GA5CuC,CA4CtC;AACF;;;AAGA,MAAIV,iBAAiB,CAACK,IAAD,CAArB,EAA6B;AAC3B,QAAI,CAACV,YAAY,CAACS,KAAD,CAAjB,EAA0B;AACxB,aAAO,IAAP;AACD;;AAED,QAAIa,UAAU,GAAG,EAAjB;;AAEA,SAAK,IAAIC,GAAG,GAAG,CAAV,EAAaC,cAAc,GAAG7B,YAAY,CAACe,IAAI,CAACe,SAAL,EAAD,CAA/C,EAAmEF,GAAG,GAAGC,cAAc,CAACE,MAAxF,EAAgGH,GAAG,EAAnG,EAAuG;AACrG,UAAII,KAAK,GAAGH,cAAc,CAACD,GAAD,CAA1B;AACA,UAAIK,UAAU,GAAGpB,YAAY,CAACC,KAAK,CAACkB,KAAK,CAACE,IAAP,CAAN,EAAoBF,KAAK,CAACjB,IAA1B,CAA7B;;AAEA,UAAIkB,UAAJ,EAAgB;AACdN,QAAAA,UAAU,CAACH,IAAX,CAAgB;AACdN,UAAAA,IAAI,EAAEZ,IAAI,CAAC6B,YADG;AAEdD,UAAAA,IAAI,EAAE;AACJhB,YAAAA,IAAI,EAAEZ,IAAI,CAAC8B,IADP;AAEJtB,YAAAA,KAAK,EAAEkB,KAAK,CAACE;AAFT,WAFQ;AAMdpB,UAAAA,KAAK,EAAEmB;AANO,SAAhB;AAQD;AACF;;AAED,WAAO;AACLf,MAAAA,IAAI,EAAEZ,IAAI,CAAC+B,MADN;AAELC,MAAAA,MAAM,EAAEX;AAFH,KAAP;AAID;AAED;;;AACA,MAAInB,UAAU,CAACO,IAAD,CAAd,EAAsB;AACpB;AACA;AACA,QAAIwB,UAAU,GAAGxB,IAAI,CAACyB,SAAL,CAAe1B,KAAf,CAAjB;;AAEA,QAAIX,SAAS,CAACoC,UAAD,CAAb,EAA2B;AACzB,aAAO,IAAP;AACD,KAPmB,CAOlB;;;AAGF,QAAI,OAAOA,UAAP,KAAsB,SAA1B,EAAqC;AACnC,aAAO;AACLrB,QAAAA,IAAI,EAAEZ,IAAI,CAACmC,OADN;AAEL3B,QAAAA,KAAK,EAAEyB;AAFF,OAAP;AAID,KAfmB,CAelB;;;AAGF,QAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC,UAAIG,SAAS,GAAGC,MAAM,CAACJ,UAAD,CAAtB;AACA,aAAOK,mBAAmB,CAACC,IAApB,CAAyBH,SAAzB,IAAsC;AAC3CxB,QAAAA,IAAI,EAAEZ,IAAI,CAACwC,GADgC;AAE3ChC,QAAAA,KAAK,EAAE4B;AAFoC,OAAtC,GAGH;AACFxB,QAAAA,IAAI,EAAEZ,IAAI,CAACyC,KADT;AAEFjC,QAAAA,KAAK,EAAE4B;AAFL,OAHJ;AAOD;;AAED,QAAI,OAAOH,UAAP,KAAsB,QAA1B,EAAoC;AAClC;AACA,UAAI9B,UAAU,CAACM,IAAD,CAAd,EAAsB;AACpB,eAAO;AACLG,UAAAA,IAAI,EAAEZ,IAAI,CAAC0C,IADN;AAELlC,UAAAA,KAAK,EAAEyB;AAFF,SAAP;AAID,OAPiC,CAOhC;;;AAGF,UAAIxB,IAAI,KAAKR,SAAT,IAAsBqC,mBAAmB,CAACC,IAApB,CAAyBN,UAAzB,CAA1B,EAAgE;AAC9D,eAAO;AACLrB,UAAAA,IAAI,EAAEZ,IAAI,CAACwC,GADN;AAELhC,UAAAA,KAAK,EAAEyB;AAFF,SAAP;AAID;;AAED,aAAO;AACLrB,QAAAA,IAAI,EAAEZ,IAAI,CAAC2C,MADN;AAELnC,QAAAA,KAAK,EAAEyB;AAFF,OAAP;AAID;;AAED,UAAM,IAAIW,SAAJ,CAAc,gCAAgCC,MAAhC,CAAuClD,OAAO,CAACsC,UAAD,CAA9C,CAAd,CAAN;AACD,GAnIuC,CAmItC;;AAGF;;;AACArC,EAAAA,SAAS,CAAC,KAAD,EAAQ,4BAA4BD,OAAO,CAACc,IAAD,CAA3C,CAAT;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,IAAI6B,mBAAmB,GAAG,uBAA1B","sourcesContent":["import { forEach, isCollection } from 'iterall';\nimport objectValues from '../polyfills/objectValues';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport isNullish from '../jsutils/isNullish';\nimport isInvalid from '../jsutils/isInvalid';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport { Kind } from '../language/kinds';\nimport { GraphQLID } from '../type/scalars';\nimport { isLeafType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\n/**\n * Produces a GraphQL Value AST given a JavaScript value.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    var astValue = astFromValue(value, type.ofType);\n\n    if (astValue && astValue.kind === Kind.NULL) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL\n    };\n  } // undefined, NaN\n\n\n  if (isInvalid(value)) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (isCollection(value)) {\n      var valuesNodes = [];\n      forEach(value, function (item) {\n        var itemNode = astFromValue(item, itemType);\n\n        if (itemNode) {\n          valuesNodes.push(itemNode);\n        }\n      });\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(value)) {\n      return null;\n    }\n\n    var fieldNodes = [];\n\n    for (var _i2 = 0, _objectValues2 = objectValues(type.getFields()); _i2 < _objectValues2.length; _i2++) {\n      var field = _objectValues2[_i2];\n      var fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name\n          },\n          value: fieldValue\n        });\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes\n    };\n  }\n\n  /* istanbul ignore else */\n  if (isLeafType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(value);\n\n    if (isNullish(serialized)) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n\n    if (typeof serialized === 'number') {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? {\n        kind: Kind.INT,\n        value: stringNum\n      } : {\n        kind: Kind.FLOAT,\n        value: stringNum\n      };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized\n        };\n      } // ID types can use Int literals.\n\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized\n      };\n    }\n\n    throw new TypeError(\"Cannot convert value to AST: \".concat(inspect(serialized)));\n  } // Not reachable. All possible input types have been considered.\n\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nvar integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n"]},"metadata":{},"sourceType":"module"}