{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nimport { isEnumType } from '../../type/definition';\nexport function duplicateEnumValueNameMessage(typeName, valueName) {\n  return \"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" can only be defined once.\");\n}\nexport function existedEnumValueNameMessage(typeName, valueName) {\n  return \"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\");\n}\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\n\nexport function UniqueEnumValueNames(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness\n  };\n\n  function checkValueUniqueness(node) {\n    var typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    }\n\n    if (node.values) {\n      var valueNames = knownValueNames[typeName];\n\n      for (var _i2 = 0, _node$values2 = node.values; _i2 < _node$values2.length; _i2++) {\n        var valueDef = _node$values2[_i2];\n        var valueName = valueDef.name.value;\n        var existingType = existingTypeMap[typeName];\n\n        if (isEnumType(existingType) && existingType.getValue(valueName)) {\n          context.reportError(new GraphQLError(existedEnumValueNameMessage(typeName, valueName), valueDef.name));\n        } else if (valueNames[valueName]) {\n          context.reportError(new GraphQLError(duplicateEnumValueNameMessage(typeName, valueName), [valueNames[valueName], valueDef.name]));\n        } else {\n          valueNames[valueName] = valueDef.name;\n        }\n      }\n    }\n\n    return false;\n  }\n}","map":{"version":3,"sources":["/Users/austinhague/Full_Stack_UofR/Projects/shop-shop-till-you-drop/client/node_modules/graphql/validation/rules/UniqueEnumValueNames.mjs"],"names":["GraphQLError","isEnumType","duplicateEnumValueNameMessage","typeName","valueName","concat","existedEnumValueNameMessage","UniqueEnumValueNames","context","schema","getSchema","existingTypeMap","getTypeMap","Object","create","knownValueNames","EnumTypeDefinition","checkValueUniqueness","EnumTypeExtension","node","name","value","values","valueNames","_i2","_node$values2","length","valueDef","existingType","getValue","reportError"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,OAAO,SAASC,6BAAT,CAAuCC,QAAvC,EAAiDC,SAAjD,EAA4D;AACjE,SAAO,gBAAgBC,MAAhB,CAAuBF,QAAvB,EAAiC,GAAjC,EAAsCE,MAAtC,CAA6CD,SAA7C,EAAwD,8BAAxD,CAAP;AACD;AACD,OAAO,SAASE,2BAAT,CAAqCH,QAArC,EAA+CC,SAA/C,EAA0D;AAC/D,SAAO,gBAAgBC,MAAhB,CAAuBF,QAAvB,EAAiC,GAAjC,EAAsCE,MAAtC,CAA6CD,SAA7C,EAAwD,oFAAxD,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,oBAAT,CAA8BC,OAA9B,EAAuC;AAC5C,MAAIC,MAAM,GAAGD,OAAO,CAACE,SAAR,EAAb;AACA,MAAIC,eAAe,GAAGF,MAAM,GAAGA,MAAM,CAACG,UAAP,EAAH,GAAyBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAArD;AACA,MAAIC,eAAe,GAAGF,MAAM,CAACC,MAAP,CAAc,IAAd,CAAtB;AACA,SAAO;AACLE,IAAAA,kBAAkB,EAAEC,oBADf;AAELC,IAAAA,iBAAiB,EAAED;AAFd,GAAP;;AAKA,WAASA,oBAAT,CAA8BE,IAA9B,EAAoC;AAClC,QAAIhB,QAAQ,GAAGgB,IAAI,CAACC,IAAL,CAAUC,KAAzB;;AAEA,QAAI,CAACN,eAAe,CAACZ,QAAD,CAApB,EAAgC;AAC9BY,MAAAA,eAAe,CAACZ,QAAD,CAAf,GAA4BU,MAAM,CAACC,MAAP,CAAc,IAAd,CAA5B;AACD;;AAED,QAAIK,IAAI,CAACG,MAAT,EAAiB;AACf,UAAIC,UAAU,GAAGR,eAAe,CAACZ,QAAD,CAAhC;;AAEA,WAAK,IAAIqB,GAAG,GAAG,CAAV,EAAaC,aAAa,GAAGN,IAAI,CAACG,MAAvC,EAA+CE,GAAG,GAAGC,aAAa,CAACC,MAAnE,EAA2EF,GAAG,EAA9E,EAAkF;AAChF,YAAIG,QAAQ,GAAGF,aAAa,CAACD,GAAD,CAA5B;AACA,YAAIpB,SAAS,GAAGuB,QAAQ,CAACP,IAAT,CAAcC,KAA9B;AACA,YAAIO,YAAY,GAAGjB,eAAe,CAACR,QAAD,CAAlC;;AAEA,YAAIF,UAAU,CAAC2B,YAAD,CAAV,IAA4BA,YAAY,CAACC,QAAb,CAAsBzB,SAAtB,CAAhC,EAAkE;AAChEI,UAAAA,OAAO,CAACsB,WAAR,CAAoB,IAAI9B,YAAJ,CAAiBM,2BAA2B,CAACH,QAAD,EAAWC,SAAX,CAA5C,EAAmEuB,QAAQ,CAACP,IAA5E,CAApB;AACD,SAFD,MAEO,IAAIG,UAAU,CAACnB,SAAD,CAAd,EAA2B;AAChCI,UAAAA,OAAO,CAACsB,WAAR,CAAoB,IAAI9B,YAAJ,CAAiBE,6BAA6B,CAACC,QAAD,EAAWC,SAAX,CAA9C,EAAqE,CAACmB,UAAU,CAACnB,SAAD,CAAX,EAAwBuB,QAAQ,CAACP,IAAjC,CAArE,CAApB;AACD,SAFM,MAEA;AACLG,UAAAA,UAAU,CAACnB,SAAD,CAAV,GAAwBuB,QAAQ,CAACP,IAAjC;AACD;AACF;AACF;;AAED,WAAO,KAAP;AACD;AACF","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nimport { isEnumType } from '../../type/definition';\nexport function duplicateEnumValueNameMessage(typeName, valueName) {\n  return \"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" can only be defined once.\");\n}\nexport function existedEnumValueNameMessage(typeName, valueName) {\n  return \"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\");\n}\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\n\nexport function UniqueEnumValueNames(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness\n  };\n\n  function checkValueUniqueness(node) {\n    var typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    }\n\n    if (node.values) {\n      var valueNames = knownValueNames[typeName];\n\n      for (var _i2 = 0, _node$values2 = node.values; _i2 < _node$values2.length; _i2++) {\n        var valueDef = _node$values2[_i2];\n        var valueName = valueDef.name.value;\n        var existingType = existingTypeMap[typeName];\n\n        if (isEnumType(existingType) && existingType.getValue(valueName)) {\n          context.reportError(new GraphQLError(existedEnumValueNameMessage(typeName, valueName), valueDef.name));\n        } else if (valueNames[valueName]) {\n          context.reportError(new GraphQLError(duplicateEnumValueNameMessage(typeName, valueName), [valueNames[valueName], valueDef.name]));\n        } else {\n          valueNames[valueName] = valueDef.name;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}