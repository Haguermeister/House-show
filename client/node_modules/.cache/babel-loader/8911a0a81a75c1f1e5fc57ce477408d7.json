{"ast":null,"code":"import inspect from '../jsutils/inspect';\nimport { Source } from '../language/source';\nimport { TokenKind } from '../language/tokenKind';\nimport { createLexer, isPunctuatorToken } from '../language/lexer';\nimport { dedentBlockStringValue, getBlockStringIndentation } from '../language/blockString';\n/**\n * Strips characters that are not significant to the validity or execution\n * of a GraphQL document:\n *   - UnicodeBOM\n *   - WhiteSpace\n *   - LineTerminator\n *   - Comment\n *   - Comma\n *   - BlockString indentation\n *\n * Note: It is required to have a delimiter character between neighboring\n * non-punctuator tokens and this function always uses single space as delimiter.\n *\n * It is guaranteed that both input and output documents if parsed would result\n * in the exact same AST except for nodes location.\n *\n * Warning: It is guaranteed that this function will always produce stable results.\n * However, it's not guaranteed that it will stay the same between different\n * releases due to bugfixes or changes in the GraphQL specification.\n *\n * Query example:\n *\n * query SomeQuery($foo: String!, $bar: String) {\n *   someField(foo: $foo, bar: $bar) {\n *     a\n *     b {\n *       c\n *       d\n *     }\n *   }\n * }\n *\n * Becomes:\n *\n * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\n *\n * SDL example:\n *\n * \"\"\"\n * Type description\n * \"\"\"\n * type Foo {\n *   \"\"\"\n *   Field description\n *   \"\"\"\n *   bar: String\n * }\n *\n * Becomes:\n *\n * \"\"\"Type description\"\"\" type Foo{\"\"\"Field description\"\"\" bar:String}\n */\n\nexport function stripIgnoredCharacters(source) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n\n  if (!(sourceObj instanceof Source)) {\n    throw new TypeError(\"Must provide string or Source. Received: \".concat(inspect(sourceObj)));\n  }\n\n  var body = sourceObj.body;\n  var lexer = createLexer(sourceObj);\n  var strippedBody = '';\n  var wasLastAddedTokenNonPunctuator = false;\n\n  while (lexer.advance().kind !== TokenKind.EOF) {\n    var currentToken = lexer.token;\n    var tokenKind = currentToken.kind;\n    /**\n     * Every two non-punctuator tokens should have space between them.\n     * Also prevent case of non-punctuator token following by spread resulting\n     * in invalid token (e.g. `1...` is invalid Float token).\n     */\n\n    var isNonPunctuator = !isPunctuatorToken(currentToken);\n\n    if (wasLastAddedTokenNonPunctuator) {\n      if (isNonPunctuator || currentToken.kind === TokenKind.SPREAD) {\n        strippedBody += ' ';\n      }\n    }\n\n    var tokenBody = body.slice(currentToken.start, currentToken.end);\n\n    if (tokenKind === TokenKind.BLOCK_STRING) {\n      strippedBody += dedentBlockString(tokenBody);\n    } else {\n      strippedBody += tokenBody;\n    }\n\n    wasLastAddedTokenNonPunctuator = isNonPunctuator;\n  }\n\n  return strippedBody;\n}\n\nfunction dedentBlockString(blockStr) {\n  // skip leading and trailing triple quotations\n  var rawStr = blockStr.slice(3, -3);\n  var body = dedentBlockStringValue(rawStr);\n  var lines = body.split(/\\r\\n|[\\n\\r]/g);\n\n  if (getBlockStringIndentation(lines) > 0) {\n    body = '\\n' + body;\n  }\n\n  var lastChar = body[body.length - 1];\n  var hasTrailingQuote = lastChar === '\"' && body.slice(-4) !== '\\\\\"\"\"';\n\n  if (hasTrailingQuote || lastChar === '\\\\') {\n    body += '\\n';\n  }\n\n  return '\"\"\"' + body + '\"\"\"';\n}","map":{"version":3,"sources":["/Users/austinhague/Full_Stack_UofR/Projects/shop-shop-till-you-drop/client/node_modules/graphql/utilities/stripIgnoredCharacters.mjs"],"names":["inspect","Source","TokenKind","createLexer","isPunctuatorToken","dedentBlockStringValue","getBlockStringIndentation","stripIgnoredCharacters","source","sourceObj","TypeError","concat","body","lexer","strippedBody","wasLastAddedTokenNonPunctuator","advance","kind","EOF","currentToken","token","tokenKind","isNonPunctuator","SPREAD","tokenBody","slice","start","end","BLOCK_STRING","dedentBlockString","blockStr","rawStr","lines","split","lastChar","length","hasTrailingQuote"],"mappings":"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","sourcesContent":["import inspect from '../jsutils/inspect';\nimport { Source } from '../language/source';\nimport { TokenKind } from '../language/tokenKind';\nimport { createLexer, isPunctuatorToken } from '../language/lexer';\nimport { dedentBlockStringValue, getBlockStringIndentation } from '../language/blockString';\n/**\n * Strips characters that are not significant to the validity or execution\n * of a GraphQL document:\n *   - UnicodeBOM\n *   - WhiteSpace\n *   - LineTerminator\n *   - Comment\n *   - Comma\n *   - BlockString indentation\n *\n * Note: It is required to have a delimiter character between neighboring\n * non-punctuator tokens and this function always uses single space as delimiter.\n *\n * It is guaranteed that both input and output documents if parsed would result\n * in the exact same AST except for nodes location.\n *\n * Warning: It is guaranteed that this function will always produce stable results.\n * However, it's not guaranteed that it will stay the same between different\n * releases due to bugfixes or changes in the GraphQL specification.\n *\n * Query example:\n *\n * query SomeQuery($foo: String!, $bar: String) {\n *   someField(foo: $foo, bar: $bar) {\n *     a\n *     b {\n *       c\n *       d\n *     }\n *   }\n * }\n *\n * Becomes:\n *\n * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\n *\n * SDL example:\n *\n * \"\"\"\n * Type description\n * \"\"\"\n * type Foo {\n *   \"\"\"\n *   Field description\n *   \"\"\"\n *   bar: String\n * }\n *\n * Becomes:\n *\n * \"\"\"Type description\"\"\" type Foo{\"\"\"Field description\"\"\" bar:String}\n */\n\nexport function stripIgnoredCharacters(source) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n\n  if (!(sourceObj instanceof Source)) {\n    throw new TypeError(\"Must provide string or Source. Received: \".concat(inspect(sourceObj)));\n  }\n\n  var body = sourceObj.body;\n  var lexer = createLexer(sourceObj);\n  var strippedBody = '';\n  var wasLastAddedTokenNonPunctuator = false;\n\n  while (lexer.advance().kind !== TokenKind.EOF) {\n    var currentToken = lexer.token;\n    var tokenKind = currentToken.kind;\n    /**\n     * Every two non-punctuator tokens should have space between them.\n     * Also prevent case of non-punctuator token following by spread resulting\n     * in invalid token (e.g. `1...` is invalid Float token).\n     */\n\n    var isNonPunctuator = !isPunctuatorToken(currentToken);\n\n    if (wasLastAddedTokenNonPunctuator) {\n      if (isNonPunctuator || currentToken.kind === TokenKind.SPREAD) {\n        strippedBody += ' ';\n      }\n    }\n\n    var tokenBody = body.slice(currentToken.start, currentToken.end);\n\n    if (tokenKind === TokenKind.BLOCK_STRING) {\n      strippedBody += dedentBlockString(tokenBody);\n    } else {\n      strippedBody += tokenBody;\n    }\n\n    wasLastAddedTokenNonPunctuator = isNonPunctuator;\n  }\n\n  return strippedBody;\n}\n\nfunction dedentBlockString(blockStr) {\n  // skip leading and trailing triple quotations\n  var rawStr = blockStr.slice(3, -3);\n  var body = dedentBlockStringValue(rawStr);\n  var lines = body.split(/\\r\\n|[\\n\\r]/g);\n\n  if (getBlockStringIndentation(lines) > 0) {\n    body = '\\n' + body;\n  }\n\n  var lastChar = body[body.length - 1];\n  var hasTrailingQuote = lastChar === '\"' && body.slice(-4) !== '\\\\\"\"\"';\n\n  if (hasTrailingQuote || lastChar === '\\\\') {\n    body += '\\n';\n  }\n\n  return '\"\"\"' + body + '\"\"\"';\n}\n"]},"metadata":{},"sourceType":"module"}