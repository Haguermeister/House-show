{"ast":null,"code":"import devAssert from '../jsutils/devAssert';\nimport { GraphQLError } from '../error/GraphQLError';\nvar NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertValidName(name) {\n  var error = isValidNameError(name);\n\n  if (error) {\n    throw error;\n  }\n\n  return name;\n}\n/**\n * Returns an Error if a name is invalid.\n */\n\nexport function isValidNameError(name, node) {\n  typeof name === 'string' || devAssert(0, 'Expected string');\n\n  if (name.length > 1 && name[0] === '_' && name[1] === '_') {\n    return new GraphQLError(\"Name \\\"\".concat(name, \"\\\" must not begin with \\\"__\\\", which is reserved by GraphQL introspection.\"), node);\n  }\n\n  if (!NAME_RX.test(name)) {\n    return new GraphQLError(\"Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \\\"\".concat(name, \"\\\" does not.\"), node);\n  }\n}","map":{"version":3,"sources":["/Users/austinhague/Full_Stack_UofR/Projects/House-show/client/node_modules/graphql/utilities/assertValidName.mjs"],"names":["devAssert","GraphQLError","NAME_RX","assertValidName","name","error","isValidNameError","node","length","concat","test"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,sBAAtB;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,IAAIC,OAAO,GAAG,0BAAd;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AACpC,MAAIC,KAAK,GAAGC,gBAAgB,CAACF,IAAD,CAA5B;;AAEA,MAAIC,KAAJ,EAAW;AACT,UAAMA,KAAN;AACD;;AAED,SAAOD,IAAP;AACD;AACD;AACA;AACA;;AAEA,OAAO,SAASE,gBAAT,CAA0BF,IAA1B,EAAgCG,IAAhC,EAAsC;AAC3C,SAAOH,IAAP,KAAgB,QAAhB,IAA4BJ,SAAS,CAAC,CAAD,EAAI,iBAAJ,CAArC;;AAEA,MAAII,IAAI,CAACI,MAAL,GAAc,CAAd,IAAmBJ,IAAI,CAAC,CAAD,CAAJ,KAAY,GAA/B,IAAsCA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAtD,EAA2D;AACzD,WAAO,IAAIH,YAAJ,CAAiB,UAAUQ,MAAV,CAAiBL,IAAjB,EAAuB,4EAAvB,CAAjB,EAAuHG,IAAvH,CAAP;AACD;;AAED,MAAI,CAACL,OAAO,CAACQ,IAAR,CAAaN,IAAb,CAAL,EAAyB;AACvB,WAAO,IAAIH,YAAJ,CAAiB,qDAAqDQ,MAArD,CAA4DL,IAA5D,EAAkE,cAAlE,CAAjB,EAAoGG,IAApG,CAAP;AACD;AACF","sourcesContent":["import devAssert from '../jsutils/devAssert';\nimport { GraphQLError } from '../error/GraphQLError';\nvar NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertValidName(name) {\n  var error = isValidNameError(name);\n\n  if (error) {\n    throw error;\n  }\n\n  return name;\n}\n/**\n * Returns an Error if a name is invalid.\n */\n\nexport function isValidNameError(name, node) {\n  typeof name === 'string' || devAssert(0, 'Expected string');\n\n  if (name.length > 1 && name[0] === '_' && name[1] === '_') {\n    return new GraphQLError(\"Name \\\"\".concat(name, \"\\\" must not begin with \\\"__\\\", which is reserved by GraphQL introspection.\"), node);\n  }\n\n  if (!NAME_RX.test(name)) {\n    return new GraphQLError(\"Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \\\"\".concat(name, \"\\\" does not.\"), node);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}