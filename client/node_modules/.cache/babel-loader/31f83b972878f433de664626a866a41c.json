{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError';\nexport function unusedVariableMessage(varName, opName) {\n  return opName ? \"Variable \\\"$\".concat(varName, \"\\\" is never used in operation \\\"\").concat(opName, \"\\\".\") : \"Variable \\\"$\".concat(varName, \"\\\" is never used.\");\n}\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n */\n\nexport function NoUnusedVariables(context) {\n  var variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n        var opName = operation.name ? operation.name.value : null;\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (var _i4 = 0, _variableDefs2 = variableDefs; _i4 < _variableDefs2.length; _i4++) {\n          var variableDef = _variableDefs2[_i4];\n          var variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new GraphQLError(unusedVariableMessage(variableName, opName), variableDef));\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/austinhague/Full_Stack_UofR/Projects/shop-shop-till-you-drop/client/node_modules/graphql/validation/rules/NoUnusedVariables.mjs"],"names":["GraphQLError","unusedVariableMessage","varName","opName","concat","NoUnusedVariables","context","variableDefs","OperationDefinition","enter","leave","operation","variableNameUsed","Object","create","usages","getRecursiveVariableUsages","name","value","_i2","length","_ref2","node","_i4","_variableDefs2","variableDef","variableName","variable","reportError","VariableDefinition","def","push"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,OAAO,SAASC,qBAAT,CAA+BC,OAA/B,EAAwCC,MAAxC,EAAgD;AACrD,SAAOA,MAAM,GAAG,eAAeC,MAAf,CAAsBF,OAAtB,EAA+B,kCAA/B,EAAmEE,MAAnE,CAA0ED,MAA1E,EAAkF,KAAlF,CAAH,GAA8F,eAAeC,MAAf,CAAsBF,OAAtB,EAA+B,mBAA/B,CAA3G;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,iBAAT,CAA2BC,OAA3B,EAAoC;AACzC,MAAIC,YAAY,GAAG,EAAnB;AACA,SAAO;AACLC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtBF,QAAAA,YAAY,GAAG,EAAf;AACD,OAHkB;AAInBG,MAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,SAAf,EAA0B;AAC/B,YAAIC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAvB;AACA,YAAIC,MAAM,GAAGT,OAAO,CAACU,0BAAR,CAAmCL,SAAnC,CAAb;AACA,YAAIR,MAAM,GAAGQ,SAAS,CAACM,IAAV,GAAiBN,SAAS,CAACM,IAAV,CAAeC,KAAhC,GAAwC,IAArD;;AAEA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGJ,MAAM,CAACK,MAA/B,EAAuCD,GAAG,EAA1C,EAA8C;AAC5C,cAAIE,KAAK,GAAGN,MAAM,CAACI,GAAD,CAAlB;AACA,cAAIG,IAAI,GAAGD,KAAK,CAACC,IAAjB;AACAV,UAAAA,gBAAgB,CAACU,IAAI,CAACL,IAAL,CAAUC,KAAX,CAAhB,GAAoC,IAApC;AACD;;AAED,aAAK,IAAIK,GAAG,GAAG,CAAV,EAAaC,cAAc,GAAGjB,YAAnC,EAAiDgB,GAAG,GAAGC,cAAc,CAACJ,MAAtE,EAA8EG,GAAG,EAAjF,EAAqF;AACnF,cAAIE,WAAW,GAAGD,cAAc,CAACD,GAAD,CAAhC;AACA,cAAIG,YAAY,GAAGD,WAAW,CAACE,QAAZ,CAAqBV,IAArB,CAA0BC,KAA7C;;AAEA,cAAIN,gBAAgB,CAACc,YAAD,CAAhB,KAAmC,IAAvC,EAA6C;AAC3CpB,YAAAA,OAAO,CAACsB,WAAR,CAAoB,IAAI5B,YAAJ,CAAiBC,qBAAqB,CAACyB,YAAD,EAAevB,MAAf,CAAtC,EAA8DsB,WAA9D,CAApB;AACD;AACF;AACF;AAvBkB,KADhB;AA0BLI,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,GAA5B,EAAiC;AACnDvB,MAAAA,YAAY,CAACwB,IAAb,CAAkBD,GAAlB;AACD;AA5BI,GAAP;AA8BD","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nexport function unusedVariableMessage(varName, opName) {\n  return opName ? \"Variable \\\"$\".concat(varName, \"\\\" is never used in operation \\\"\").concat(opName, \"\\\".\") : \"Variable \\\"$\".concat(varName, \"\\\" is never used.\");\n}\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n */\n\nexport function NoUnusedVariables(context) {\n  var variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n        var opName = operation.name ? operation.name.value : null;\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (var _i4 = 0, _variableDefs2 = variableDefs; _i4 < _variableDefs2.length; _i4++) {\n          var variableDef = _variableDefs2[_i4];\n          var variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new GraphQLError(unusedVariableMessage(variableName, opName), variableDef));\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}