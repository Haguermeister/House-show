{"ast":null,"code":"import inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport keyValMap from '../jsutils/keyValMap';\nimport isInvalid from '../jsutils/isInvalid';\nimport { Kind } from '../language/kinds';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\n\nexport function valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case Kind.NULL:\n      return null;\n\n    case Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case Kind.STRING:\n    case Kind.ENUM:\n    case Kind.BOOLEAN:\n      return valueNode.value;\n\n    case Kind.LIST:\n      return valueNode.values.map(function (node) {\n        return valueFromASTUntyped(node, variables);\n      });\n\n    case Kind.OBJECT:\n      return keyValMap(valueNode.fields, function (field) {\n        return field.name.value;\n      }, function (field) {\n        return valueFromASTUntyped(field.value, variables);\n      });\n\n    case Kind.VARIABLE:\n      {\n        var variableName = valueNode.name.value;\n        return variables && !isInvalid(variables[variableName]) ? variables[variableName] : undefined;\n      }\n  } // Not reachable. All possible value nodes have been considered.\n\n  /* istanbul ignore next */\n\n\n  invariant(false, 'Unexpected value node: ' + inspect(valueNode));\n}","map":{"version":3,"sources":["/Users/austinhague/Full_Stack_UofR/Projects/House-show/client/node_modules/graphql/utilities/valueFromASTUntyped.mjs"],"names":["inspect","invariant","keyValMap","isInvalid","Kind","valueFromASTUntyped","valueNode","variables","kind","NULL","INT","parseInt","value","FLOAT","parseFloat","STRING","ENUM","BOOLEAN","LIST","values","map","node","OBJECT","fields","field","name","VARIABLE","variableName","undefined"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,SAASC,IAAT,QAAqB,mBAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BC,SAA7B,EAAwCC,SAAxC,EAAmD;AACxD,UAAQD,SAAS,CAACE,IAAlB;AACE,SAAKJ,IAAI,CAACK,IAAV;AACE,aAAO,IAAP;;AAEF,SAAKL,IAAI,CAACM,GAAV;AACE,aAAOC,QAAQ,CAACL,SAAS,CAACM,KAAX,EAAkB,EAAlB,CAAf;;AAEF,SAAKR,IAAI,CAACS,KAAV;AACE,aAAOC,UAAU,CAACR,SAAS,CAACM,KAAX,CAAjB;;AAEF,SAAKR,IAAI,CAACW,MAAV;AACA,SAAKX,IAAI,CAACY,IAAV;AACA,SAAKZ,IAAI,CAACa,OAAV;AACE,aAAOX,SAAS,CAACM,KAAjB;;AAEF,SAAKR,IAAI,CAACc,IAAV;AACE,aAAOZ,SAAS,CAACa,MAAV,CAAiBC,GAAjB,CAAqB,UAAUC,IAAV,EAAgB;AAC1C,eAAOhB,mBAAmB,CAACgB,IAAD,EAAOd,SAAP,CAA1B;AACD,OAFM,CAAP;;AAIF,SAAKH,IAAI,CAACkB,MAAV;AACE,aAAOpB,SAAS,CAACI,SAAS,CAACiB,MAAX,EAAmB,UAAUC,KAAV,EAAiB;AAClD,eAAOA,KAAK,CAACC,IAAN,CAAWb,KAAlB;AACD,OAFe,EAEb,UAAUY,KAAV,EAAiB;AAClB,eAAOnB,mBAAmB,CAACmB,KAAK,CAACZ,KAAP,EAAcL,SAAd,CAA1B;AACD,OAJe,CAAhB;;AAMF,SAAKH,IAAI,CAACsB,QAAV;AACE;AACE,YAAIC,YAAY,GAAGrB,SAAS,CAACmB,IAAV,CAAeb,KAAlC;AACA,eAAOL,SAAS,IAAI,CAACJ,SAAS,CAACI,SAAS,CAACoB,YAAD,CAAV,CAAvB,GAAmDpB,SAAS,CAACoB,YAAD,CAA5D,GAA6EC,SAApF;AACD;AA/BL,GADwD,CAiCtD;;AAGF;;;AACA3B,EAAAA,SAAS,CAAC,KAAD,EAAQ,4BAA4BD,OAAO,CAACM,SAAD,CAA3C,CAAT;AACD","sourcesContent":["import inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport keyValMap from '../jsutils/keyValMap';\nimport isInvalid from '../jsutils/isInvalid';\nimport { Kind } from '../language/kinds';\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\nexport function valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case Kind.NULL:\n      return null;\n\n    case Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case Kind.STRING:\n    case Kind.ENUM:\n    case Kind.BOOLEAN:\n      return valueNode.value;\n\n    case Kind.LIST:\n      return valueNode.values.map(function (node) {\n        return valueFromASTUntyped(node, variables);\n      });\n\n    case Kind.OBJECT:\n      return keyValMap(valueNode.fields, function (field) {\n        return field.name.value;\n      }, function (field) {\n        return valueFromASTUntyped(field.value, variables);\n      });\n\n    case Kind.VARIABLE:\n      {\n        var variableName = valueNode.name.value;\n        return variables && !isInvalid(variables[variableName]) ? variables[variableName] : undefined;\n      }\n  } // Not reachable. All possible value nodes have been considered.\n\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected value node: ' + inspect(valueNode));\n}\n"]},"metadata":{},"sourceType":"module"}