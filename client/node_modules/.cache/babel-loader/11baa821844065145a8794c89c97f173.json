{"ast":null,"code":"import inspect from '../../jsutils/inspect';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { isNonNullType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators';\nexport function badVarPosMessage(varName, varType, expectedType) {\n  return \"Variable \\\"$\".concat(varName, \"\\\" of type \\\"\").concat(varType, \"\\\" used in position expecting type \\\"\").concat(expectedType, \"\\\".\");\n}\n/**\n * Variables passed to field arguments conform to type\n */\n\nexport function VariablesInAllowedPosition(context) {\n  var varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          var type = _ref2.type;\n          var defaultValue = _ref2.defaultValue;\n          var varName = node.name.value;\n          var varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            var schema = context.getSchema();\n            var varType = typeFromAST(schema, varDef.type);\n\n            if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n              context.reportError(new GraphQLError(badVarPosMessage(varName, inspect(varType), inspect(type)), [varDef, node]));\n            }\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    var hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    var hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    var nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}","map":{"version":3,"sources":["/Users/austinhague/Full_Stack_UofR/Projects/House-show/client/node_modules/graphql/validation/rules/VariablesInAllowedPosition.mjs"],"names":["inspect","GraphQLError","Kind","isNonNullType","typeFromAST","isTypeSubTypeOf","badVarPosMessage","varName","varType","expectedType","concat","VariablesInAllowedPosition","context","varDefMap","Object","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","_i2","length","_ref2","node","type","defaultValue","name","value","varDef","schema","getSchema","allowedVariableUsage","reportError","VariableDefinition","variable","varDefaultValue","locationType","locationDefaultValue","hasNonNullVariableDefaultValue","kind","NULL","hasLocationDefaultValue","undefined","nullableLocationType","ofType"],"mappings":"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","sourcesContent":["import inspect from '../../jsutils/inspect';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { isNonNullType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators';\nexport function badVarPosMessage(varName, varType, expectedType) {\n  return \"Variable \\\"$\".concat(varName, \"\\\" of type \\\"\").concat(varType, \"\\\" used in position expecting type \\\"\").concat(expectedType, \"\\\".\");\n}\n/**\n * Variables passed to field arguments conform to type\n */\n\nexport function VariablesInAllowedPosition(context) {\n  var varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          var type = _ref2.type;\n          var defaultValue = _ref2.defaultValue;\n          var varName = node.name.value;\n          var varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            var schema = context.getSchema();\n            var varType = typeFromAST(schema, varDef.type);\n\n            if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n              context.reportError(new GraphQLError(badVarPosMessage(varName, inspect(varType), inspect(type)), [varDef, node]));\n            }\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    var hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    var hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    var nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n"]},"metadata":{},"sourceType":"module"}