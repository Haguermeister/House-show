{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useMemo, useRef } from 'react';\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { isNonEmptyArray } from \"../../utilities/index.js\";\nvar EAGER_METHODS = ['refetch', 'reobserve', 'fetchMore', 'updateQuery', 'startPolling', 'subscribeToMore'];\nexport function useLazyQuery(query, options) {\n  var internalState = useInternalState(useApolloClient(options && options.client), query);\n  var execOptionsRef = useRef();\n  var defaultOptions = internalState.client.defaultOptions.watchQuery;\n  var initialFetchPolicy = options && options.fetchPolicy || execOptionsRef.current && execOptionsRef.current.fetchPolicy || defaultOptions && defaultOptions.fetchPolicy || \"cache-first\";\n  var useQueryResult = internalState.useQuery(__assign(__assign(__assign({}, options), execOptionsRef.current), {\n    skip: !execOptionsRef.current\n  }));\n  var result = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current\n  });\n  var eagerMethods = useMemo(function () {\n    var eagerMethods = {};\n\n    var _loop_1 = function (key) {\n      var method = result[key];\n\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          internalState.forceUpdate();\n        }\n\n        return method.apply(this, arguments);\n      };\n    };\n\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n\n      _loop_1(key);\n    }\n\n    return eagerMethods;\n  }, []);\n  Object.assign(result, eagerMethods);\n  var execute = useCallback(function (executeOptions) {\n    var promise = result.reobserve(execOptionsRef.current = executeOptions ? __assign(__assign({}, executeOptions), {\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy\n    }) : {\n      fetchPolicy: initialFetchPolicy\n    }).then(function (apolloQueryResult) {\n      apolloQueryResult = apolloQueryResult || internalState[\"getCurrentResult\"]();\n\n      if (apolloQueryResult.error || isNonEmptyArray(apolloQueryResult.errors)) {\n        var _a = result.observable.options.errorPolicy,\n            errorPolicy = _a === void 0 ? \"none\" : _a;\n\n        if (errorPolicy === \"none\") {\n          throw apolloQueryResult.error || new ApolloError({\n            graphQLErrors: apolloQueryResult.errors\n          });\n        }\n      }\n\n      return internalState.toQueryResult(apolloQueryResult);\n    }).then(function (queryResult) {\n      return Object.assign(queryResult, eagerMethods);\n    });\n    internalState.forceUpdate();\n    promise.catch(function () {});\n    return promise;\n  }, []);\n  return [execute, result];\n}","map":{"version":3,"mappings":"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","names":["useCallback","useMemo","useRef","ApolloError","useInternalState","useApolloClient","isNonEmptyArray","EAGER_METHODS","useLazyQuery","query","options","internalState","client","execOptionsRef","defaultOptions","watchQuery","initialFetchPolicy","fetchPolicy","current","useQueryResult","useQuery","__assign","skip","result","Object","assign","called","eagerMethods","key","method","create","forceUpdate","apply","arguments","_i","execute","promise","reobserve","executeOptions","then","apolloQueryResult","error","errors","observable","errorPolicy","_a","graphQLErrors","toQueryResult","queryResult","catch"],"sourceRoot":"","sources":["../../../src/react/hooks/useLazyQuery.ts"],"sourcesContent":["import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useRef } from 'react';\n\nimport { OperationVariables } from '../../core';\nimport { ApolloError } from '../../errors';\nimport {\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  QueryResult,\n} from '../types/types';\nimport { useInternalState } from './useQuery';\nimport { useApolloClient } from './useApolloClient';\nimport { isNonEmptyArray } from '../../utilities';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'reobserve',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): LazyQueryResultTuple<TData, TVariables> {\n  const internalState = useInternalState(\n    useApolloClient(options && options.client),\n    query,\n  );\n\n  const execOptionsRef = useRef<Partial<LazyQueryHookOptions<TData, TVariables>>>();\n  const defaultOptions = internalState.client.defaultOptions.watchQuery;\n  const initialFetchPolicy =\n    (options && options.fetchPolicy) ||\n    (execOptionsRef.current && execOptionsRef.current.fetchPolicy) ||\n    (defaultOptions && defaultOptions.fetchPolicy) ||\n    \"cache-first\";\n\n  const useQueryResult = internalState.useQuery({\n    ...options,\n    ...execOptionsRef.current,\n    skip: !execOptionsRef.current,\n  });\n\n  const result: QueryResult<TData, TVariables> =\n    Object.assign(useQueryResult, {\n      called: !!execOptionsRef.current,\n    });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    LazyQueryResultTuple<TData, TVariables>[0]\n  >(executeOptions => {\n    const promise = result.reobserve(\n      execOptionsRef.current = executeOptions ? {\n        ...executeOptions,\n        fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n      } : {\n        fetchPolicy: initialFetchPolicy,\n      },\n    ).then(apolloQueryResult => {\n      // If this.observable.options.fetchPolicy is \"standby\", the\n      // apolloQueryResult we receive here can be undefined, so we call\n      // getCurrentResult to obtain a stub result.\n      // TODO Investigate whether standby queries could return this stub result\n      // in the first place.\n      apolloQueryResult = apolloQueryResult || internalState[\"getCurrentResult\"]();\n\n      if (\n        apolloQueryResult.error ||\n        isNonEmptyArray(apolloQueryResult.errors)\n      ) {\n        const {\n          errorPolicy = \"none\",\n        } = result.observable.options;\n\n        if (errorPolicy === \"none\") {\n          throw apolloQueryResult.error || new ApolloError({\n            graphQLErrors: apolloQueryResult.errors,\n          });\n        }\n      }\n\n      return internalState.toQueryResult(apolloQueryResult);\n\n    }).then(queryResult => Object.assign(queryResult, eagerMethods));\n\n    // Deliver the loading state for this reobservation immediately.\n    internalState.forceUpdate();\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n"]},"metadata":{},"sourceType":"module"}